;;; 书中求符号微分的改进程序

(define (deriv exp var)
  (define (variable? v)
    (symbol? v))
  (define (same-variable? v1 v2)
    (and (variable? v1) (variable? v2) (eq? v1 v2)))
  (define (sum? e)
    (eq? '+ (car e)))
  (define (product? e)
    (eq? '* (car e)))
  (define (make-sum x y)
    (cond ((and (number? x) (= x 0)) y)
          ((and (number? y) (= y 0)) x)
          ((and (number? x) (number? y)) (+ x y))
          (else(list '+ x y))))
  (define (make-product x y)
    (cond  ((and (number? x) (= x 0)) 0)
           ((and (number? y) (= y 0)) 0)
           ((and (number? x) (= x 1)) y)
           ((and (number? y) (= y 1)) x)
           ((and (number? x) (number? y)) (* x y))
           (else (list '* x y))))
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (cons (car exp) (map (lambda (e) (deriv e var)) (cdr exp))))
        ((product? exp)
         (cond ((= (length exp) 2) (deriv (cadr exp) var))
               (else (make-sum (make-product (deriv (cadr exp) var)
                                             (if (> (length (cddr exp)) 1)
                                                 (append (list '*) (cddr exp)) (caddr exp)))
                               (make-product (cadr exp) (deriv (append (list '*) (cddr exp)) var))))))
        (else (error "wrong exp!!"))))
